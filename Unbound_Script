import numpy as np
import matplotlib.pyplot as plt
import os
from os import walk
import glob

mypath = "/home/arod/Research/testclone/N500_grid/grid_run5"
# smas=[2,3,4,5,6]
# masses=[5e-2, .015811, 5e-3, .001581, 5e-4]
# angs = [45,90,135,180]
# masses=np.sort(masses)

# dirs=np.empty(len(masses), dtype=str)
# for sma in smas:
#     for ang in angs:
#         for i,mass in enumerate(masses):
#             dirs[i]="M{0:.1e}_a{1}_ang{2}".format(mass, sma, ang)

# SMA, ANG, MASS=np.meshgrid(smas,angs,masses)
# SMA=SMA.flatten()
# ANG=ANG.flatten()
# MASS=MASS.flatten()
# SMA, ANG, MASS



def NumEjected(Name):
    cwd = os.chdir(mypath + '/' + Name)
    bases = get_bases()
    emptyvals = []
    for base in bases:
        try:
            dat=np.genfromtxt(base+'_orb_499.dat')
        except:
            continue
#         file_list = glob.glob(base + '*.dat*')
#         fs1 = file_list
#         fs1=np.sort(fs1)
#         dat=np.genfromtxt(fs1[0])
#         dat_stacked=np.empty([len(fs1), dat.shape[0], dat.shape[1]])
#         for i in range(500):
#             dat_stacked[i]=np.genfromtxt(base+'_orb_{0}'.format(i)+'.dat')
        finaleccentricties = dat[:,1]
        ec = finaleccentricties
        filt1= (ec>1)
        currentvals = len(ec[filt1])
        emptyvals.append(currentvals)
        arrayvals = np.array(emptyvals)
    mean1 = np.mean(arrayvals)
    std1 = np.std(arrayvals) / np.sqrt(len(arrayvals))
    return mean1, std1

def Get(Name):
    cwd = os.chdir(mypath + '/' + Name)
    bases = get_bases()
    emptyvals = []
    for base in bases:
#         try:
#             dat=np.genfromtxt(base+'_orb_499.dat')
#         except:
#             continue
#         file_list = glob.glob(base + '*.dat*')
#         fs1 = file_list
        fs1=np.sort(fs1)
        dat=np.genfromtxt(fs1[0])
#         dat_stacked=np.empty([len(fs1), dat.shape[0], dat.shape[1]])
#         for i in range(500):
#             dat_stacked[i]=np.genfromtxt(base+'_orb_{0}'.format(i)+'.dat')
        finaleccentricties = dat[:,1]
        ec = finaleccentricties
        filt1= (ec>1)
        currentvals = len(ec[filt1])
        emptyvals.append(currentvals)
        arrayvals = np.array(emptyvals)
    mean1 = np.mean(arrayvals)
    std1 = np.std(arrayvals) / np.sqrt(len(arrayvals))
    return mean1, std1

def get_bases():
    fs=glob.glob("*orb_0.dat")
    fs=[ff.replace("_orb_0.dat", "") for ff in fs]
    return fs

# mean1 = []
# std1 = []
# for dat in zip(SMA, ANG, MASS):
#     sma,ang,mass=dat
#     val = list((NumEjected(("M{0:.1e}_a{1}_ang{2}".format(mass, sma, ang)))))
#     print(val)
#     mean1.append(val[0])
#     std1.append(val[1])


fig,ax=plt.subplots()
ax.set_xscale('log')
###Super Super Important
mean0=[]
std0=[]
smas=[2,4]
masses=[5e-2,5e-4]
angs=[45,180]
mean1=np.zeros([len(angs),len(masses)])
for i,ang in enumerate(angs):
    for j,mass in enumerate(masses):
        dd="M{0:.1e}_a{1}_ang{2}".format(mass,'2',ang)
        mean1[i,j]=NumEjected(dd)[0]
plt.plot(masses, mean1[0], 's',label='45')
plt.plot(masses, mean1[1], 's',label='90')
plt.plot(masses, mean1[2], 's',label='135')
plt.plot(masses, mean1[3], 's',label='180')
plt.xlabel('Mass')
plt.ylabel('Unbound (out of 100)')
plt.title('Unbound as func. of Inc. for sma=2')
plt.legend()

fig=plt.gcf()
fig.set_size_inches(8.5,6.5)
plt.savefig('figure1')
print('Finished!')
