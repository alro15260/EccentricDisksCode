import numpy as np
import matplotlib.pyplot as plt
import os
from os import walk
import glob
from datetime import datetime
Data = 'M5.0e-04_a6_ang90'
Mass0=''
for i in list(Data[1:8]):
     Mass0+=i
sma0=int(list(Data)[10])
ang0=''
list(Data)[15:]
for j in list(Data[15:]):
    ang0+=j
print('Sanity Check:{}  {}  {}'.format(Mass0,sma0,ang0))
mypath = "/home/arod/Research/testclone/test3/grid_run3/grid"
Date=datetime.today().strftime('%Y-%m-%d')
file0='ECCPLOT_{}_{}_{}'.format(ang0,sma0,Date)
file1='INCPLOT_{}_{}_{}'.format(ang0,sma0,Date)
file2='SMAPLOT_{}_{}_{}'.format(ang0,sma0,Date)

def NumEjected(Name):
    cwd = os.chdir(mypath + '/' + Name)
    bases = get_bases()
    emptyvals = []
    for base in bases:
        try:
            dat=np.genfromtxt(base+'_orb_499.dat')
        except:
            continue
        finaleccentricties = dat[:,1]
        ec = finaleccentricties
        filt1= (ec>1)
        currentvals = len(ec[filt1])
        emptyvals.append(currentvals)
        arrayvals = np.array(emptyvals)
    mean1 = np.mean(arrayvals)
    #filt=(arrayvals<1)
    #mean1=np.mean(arrayvals[filt])
    std1 = np.std(arrayvals) / np.sqrt(len(arrayvals))
    #std1 = np.std(arrayvals[filt])/ np.sqrt(len(arrayvals[filt]))
    return mean1, std1

def Get(Name):
    cwd = os.chdir(mypath + '/' + Name)
    bases = get_bases()
    emptyvals = []
    for base in bases:
        fs1=np.sort(fs1)
        dat=np.genfromtxt(fs1[0])
        finaleccentricties = dat[:,1]
        ec = finaleccentricties
        filt1= (ec>1)
        currentvals = len(ec[filt1])
        emptyvals.append(currentvals)
        arrayvals = np.array(emptyvals)
    mean1 = np.mean(arrayvals)
    std1 = np.std(arrayvals) / np.sqrt(len(arrayvals))
    return mean1, std1

def get_bases():
    fs=glob.glob("*orb_0.dat")
    fs=[ff.replace("_orb_0.dat", "") for ff in fs]
    return fs

def get_stacked_data(name):
    cwd = os.chdir(mypath + '/' + name)
    bases = get_bases()
    dat_stacked=np.empty([len(bases), 101, 500, 6])

    for i1,base in enumerate(bases):
        for i2 in range(500):
            try:
                dat_stacked[i1, :,i2]=np.genfromtxt(base+'_orb_{0}'.format(i2)+'.dat')
            except:
                continue
    return dat_stacked
def get_stacked_data_ex(name):
    cwd = os.chdir(mypath + '/' + name)

    bases = get_bases()
    base = bases[0]
    dat_stacked=np.empty([500, 101, 6])

    for i2 in range(500):
        try:
            dat_stacked[i2]=np.genfromtxt(base+'_orb_{0}'.format(i2)+'.dat')
        except:
            continue
    return dat_stacked


dat=get_stacked_data(Data)
##collapse particle, and trial axes; we don't need to separate the trials...Isolate eccentricity
eccs=np.vstack(dat)[:,:,1]
##Transpose: Now eccs is a 2D array, with the first index indicating the orbit.
eccs=eccs.T
##For every orbit compute mean eccentricity of bound stars and store it in a 1D array.
means=np.zeros(len(eccs))
for ii in range(len(means)):
    tmp=eccs[ii]
    means[ii]=np.mean(tmp[tmp<1])
stds=np.zeros(len(means))
meanstocopy=np.copy(means)
for jj in range(len(means)):
    tmp=eccs[jj]
    stds[jj]=np.std(tmp[tmp<1])
stds=stds/np.sqrt(len(stds))
x=np.arange(0,500)
plt.plot(means,color='black')
plt.title('Combined Data for Eccentricity Value at a={} and ang={})'.format(sma0,ang0))
plt.errorbar(x,means,stds,color='red',alpha=0.3)
plt.xlabel('Orbit Number')
plt.ylabel('Eccentricity value')
fig=plt.gcf()
fig.set_size_inches(8.5,6.5)
plt.savefig('{}'.format(file0))
print('{} finished!'.format(file0))

##collapse particle, and trial axes; we don't need to separate the trials...Isolate eccentricity
smas=np.vstack(dat)[:,:,0]
##Transpose: Now eccs is a 2D array, with the first index indicating the orbit.
smas=smas.T
##For every orbit compute mean eccentricity of bound stars and store it in a 1D array.
means=np.zeros(len(eccs))
for ii in range(len(means)):
    tmp0=smas[ii]
    means[ii]=np.mean(tmp0[tmp<1])
stds=np.zeros(len(means))
for jj in range(len(means)):
    tmp0=smas[jj]
    stds[jj]=np.std(tmp0[tmp<1])
stds=stds/np.sqrt(len(stds))
x=np.arange(0,500)
plt.plot(means,color='black')
plt.title('Combined Data for SMA Value at a={} and ang={})'.format(sma0,ang0))
plt.errorbar(x,means,stds,color='red',alpha=0.3)
plt.xlabel('Orbit Number')
plt.ylabel('SMA value')
fig=plt.gcf()
fig.set_size_inches(8.5,6.5)
plt.savefig('{}'.format(file1))
print('{} finished!'.format(file1))

##collapse particle, and trial axes; we don't need to separate the trials...Isolate eccentricity
incs=np.vstack(dat)[:,:,2]
##Transpose: Now eccs is a 2D array, with the first index indicating the orbit.
incs=incs.T
##For every orbit compute mean eccentricity of bound stars and store it in a 1D array.
means=np.zeros(len(incs))
for ii in range(len(means)):
    tmp1=incs[ii]
    means[ii]=np.mean(tmp1[tmp<1])
stds=np.zeros(len(means))
for jj in range(len(means)):
    tmp0=smas[jj]
    stds[jj]=np.std(tmp1[tmp<1])
stds=stds/np.sqrt(len(stds))
x=np.arange(0,500)
plt.plot(means,color='black')
plt.title('Combined Data for Inc Value at a={} and ang={})'.format(sma0,ang0))
plt.errorbar(x,means,stds,color='red',alpha=0.3)
plt.xlabel('Orbit Number')
plt.ylabel('SMA value')
fig=plt.gcf()
fig.set_size_inches(8.5,6.5)
plt.savefig('{}'.format(file2))
print('{} finished!'.format(file2))
